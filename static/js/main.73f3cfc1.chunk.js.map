{"version":3,"sources":["Header/Header.tsx","Table/TableHeader/TableHeader.tsx","Table/TableRow/TableRow.tsx","Table/Table.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["useStyles","makeStyles","header","backgroundColor","height","logo","fontFamily","fontWeight","color","paddingBottom","fontSize","Header","appLogo","Link","href","style","textDecoration","Typography","className","AppBar","Toolbar","TableHeader","scope","width","paddingLeft","TableRow","hostsButtons","staticInfo","hosts","darkColors","Object","entries","map","entry","number","up","Boolean","os","sort","a","b","invert","hostname","codename","toLowerCase","osLogo","includes","filter","undefined","marginLeft","src","alt","marginRight","marginBottom","macosLinuxLogo","linuxLogo","Button","variant","textTransform","margin","cursor","onClick","navigator","clipboard","writeText","type","processor","memory","graphics","Table","useState","setHosts","getHosts","axios","get","then","response","data","err","console","error","message","useEffect","interval","setInterval","REFRESH_INTERVAL_SECONDS","clearInterval","computerTypeInfo","computerTypeHosts","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+TAGMA,EAAYC,aAAW,iBAAO,CAChCC,OAAQ,CACJC,gBAAiB,UACjBC,OAAQ,QAEZC,KAAM,CACFC,WAAY,4BACZC,WAAY,IACZC,MAAO,OACPC,cAAe,WACfC,SAAU,eAwBHC,MApBf,WAAmB,IAAD,EACWX,IAAjBE,EADM,EACNA,OAAQG,EADF,EACEA,KAMVO,EACF,cAACC,EAAA,EAAD,CAAMC,KAAK,8BAA8BC,MAAO,CAAEC,eAAgB,QAAlE,SACI,cAACC,EAAA,EAAD,CAAYC,UAAWb,EAAvB,mCAMR,OACI,cAACc,EAAA,EAAD,CAAQD,UAAWhB,EAAnB,SAZO,cAACkB,EAAA,EAAD,UAAUR,O,uCCCVS,MAnBf,WACI,OACI,uBAAOH,UAAU,aAAjB,SACI,+BACI,oBAAII,MAAM,MAAMP,MAAO,CAAEQ,MAAO,SAAhC,0BACA,oBAAID,MAAM,MAAMP,MAAO,CAAEQ,MAAO,SAAhC,2BACA,oBAAID,MAAM,MAAMP,MAAO,CAAEQ,MAAO,SAAhC,sBACA,oBAAID,MAAM,MAAMP,MAAO,CAAEQ,MAAO,QAAhC,kCACA,oBAAID,MAAM,MAAMP,MAAO,CAAEQ,MAAO,SAAhC,qBACA,oBAAID,MAAM,MAAMP,MAAO,CAAEQ,MAAO,SAAhC,SACI,qBAAKR,MAAO,CAAES,YAAa,QAA3B,2B,sBC8FLC,EArEoC,SAAC,GAG7C,IACCC,EAHJC,EAEE,EAFFA,WACAC,EACE,EADFA,MAGMC,EAAa,CAAC,QAAS,QAAS,QAElCD,EAUAF,EATgBI,OAAOC,QAAQH,GAAOI,KAAI,SAACC,GAAD,MACtC,CACIC,OAAQD,EAAM,GACdE,GAAIC,QAAQH,EAAM,GAAGE,IACrBE,GAAIJ,EAAM,GAAGI,IAAM,OAExBC,MAAK,SAACC,EAAEC,GAAH,OACHD,EAAEL,OAASM,EAAEN,OAAU,EAAMM,EAAEN,OAASK,EAAEL,QAAW,EAAI,KAEvCF,KAAI,SAACC,GACxB,IA9CSQ,EA8CHC,EAAQ,UAAMf,EAAWgB,SAASC,eAA1B,OAA0CX,EAAMC,QACxDW,EAASZ,EAAME,GACJ,YAAbF,EAAMI,IAhDDI,EAiDaZ,EAAWiB,SAASnB,EAAWgB,SAASC,eAhDtE,qBAAKrB,MAAM,OAAOR,MAAO,CACrBgC,OAAQN,EAAS,oBAAiBO,EAClCC,WAAY,OACbC,IAA8B,eAAgBC,IAAI,aA8CG,QAAtCxB,EAAWgB,SAASC,cApCnB,SAACH,GAAD,OACnB,sBAAK1B,MAAO,CAAEqC,YAAa,QAASC,aAAc,OAAlD,UACI,qBAAK9B,MAAM,OAAOR,MAAO,CACrBgC,OAAQN,EAAS,oBAAiBO,EAClCK,aAAc,QACfH,IAA8B,aAAcC,IAAI,UAJvD,IAMI,qBAAK5B,MAAM,OAAOR,MAAO,CACrBgC,OAAQN,EAAS,oBAAiBO,EAClCK,aAAc,QACfH,IAA8B,aAAcC,IAAI,aA2BrCG,CAAezB,EAAWiB,SAASnB,EAAWgB,SAASC,gBA5C3D,SAACH,GAAD,OACd,qBAAKlB,MAAM,OAAOR,MAAO,CACrBgC,OAAQN,EAAS,oBAAiBO,EAClCC,WAAY,OACbC,IAA8B,aAAcC,IAAI,UAyCjCI,CAAU1B,EAAWiB,SAASnB,EAAWgB,SAASC,gBACxD,qBAAK7B,MAAO,CAAEQ,MAAO,UACzB,OACI,eAACiC,EAAA,EAAD,CAEIC,QAAQ,YACR1C,MAAO,CACHZ,gBAAiB8B,EAAME,GAAKR,EAAWnB,WAAQwC,EAC/CU,cAAe,OACfnC,MAAO,QACPoC,OAAQ,MACRrD,WAAY,4BACZC,WAAY,IACZC,MAAOqB,EAAWiB,SAASnB,EAAWgB,SAASC,gBAAkBX,EAAME,GAAK,aAAUa,EACtFY,OAAS3B,EAAME,QAAiBa,EAAZ,WAExBa,QAAS5B,EAAME,GAAK,WAAO2B,UAAUC,UAAUC,UAAUtB,SAAaM,EAb1E,UAeKN,EACD,qBAAK3B,MAAO,CAAEkC,WAAY,MAAOI,aAAc,QAA/C,SACKR,MAhBAH,MAsBjBhB,EAAe,aAGnB,OACI,+BACI,oBAAIX,MAAO,CAAEP,MAAOmB,EAAWnB,OAA/B,SAAyCmB,EAAWgB,WACpD,6BAAKhB,EAAWsC,OAChB,6BAAKtC,EAAWuC,YAChB,6BAAKvC,EAAWwC,SAChB,6BAAKxC,EAAWyC,WAChB,6BACI,qBAAKrD,MAAO,CAAES,YAAa,QAA3B,SACKE,U,iBCnFfC,EAAiC,CACnC,CACIgB,SAAU,MACVsB,KAAM,uBACNC,UAAW,qBACXC,OAAQ,MACRC,SAAU,6CACV5D,MAAO,OAEX,CACImC,SAAU,OACVsB,KAAM,4BACNC,UAAW,wBACXC,OAAQ,OACRC,SAAU,+BACV5D,MAAO,sBAEX,CACImC,SAAU,SACVsB,KAAM,4BACNC,UAAW,wBACXC,OAAQ,OACRC,SAAU,+BACV5D,MAAO,UAEX,CACImC,SAAU,QACVsB,KAAM,4BACNC,UAAW,wBACXC,OAAQ,OACRC,SAAU,+BACV5D,MAAO,SAEX,CACImC,SAAU,QACVsB,KAAM,4BACNC,UAAW,wBACXC,OAAQ,MACRC,SAAU,yBACV5D,MAAO,SAEX,CACImC,SAAU,QACVsB,KAAM,4BACNC,UAAW,qBACXC,OAAQ,OACRC,SAAU,+BACV5D,MAAO,sBAEX,CACImC,SAAU,QACVsB,KAAM,4BACNC,UAAW,qBACXC,OAAQ,OACRC,SAAU,+BACV5D,MAAO,WAEX,CACImC,SAAU,OACVsB,KAAM,4BACNC,UAAW,qBACXC,OAAQ,OACRC,SAAU,+BACV5D,MAAO,QAEX,CACImC,SAAU,OACVsB,KAAM,4BACNC,UAAW,qBACXC,OAAQ,OACRC,SAAU,+BACV5D,MAAO,QAEX,CACImC,SAAU,SACVsB,KAAM,4BACNC,UAAW,qBACXC,OAAQ,OACRC,SAAU,+BACV5D,MAAO,WA+DA6D,MA9Cf,WAAkB,IAAD,EACaC,qBADb,mBACN1C,EADM,KACC2C,EADD,KAGPC,EAAQ,uCAAG,sBAAAjC,EAAA,sDACb,IACIkC,IAAMC,IAAe,sDAChBC,MAAK,SAAAC,GACFL,EAASK,EAASC,SAE5B,MAAOC,GACLC,QAAQC,MAAMF,EAAIG,SAPT,2CAAH,qDAmBd,OARAC,qBAAU,WACNV,IACA,IAAMW,EAAWC,aAAY,WACzBZ,MACFa,KACF,OAAO,kBAAMC,cAAcH,MAC7B,IAGE,qBAAKjE,UAAU,mBAAf,SACI,wBAAOA,UAAU,iBAAjB,UACI,cAAC,EAAD,IACA,gCACCS,EAAWK,KAAI,SAACuD,GACb,IAAIC,OAAoBxC,EAIxB,OAHIpB,IACA4D,EAAoB5D,EAAM2D,EAAiB5C,SAASC,gBAGpD,cAAC,EAAD,CAEIjB,WAAY4D,EACZ3D,MAAO4D,GAFFD,EAAiB5C,SAASC,0BCrI5C6C,MATf,WACI,OACI,sBAAKvE,UAAU,MAAf,UACI,cAAC,EAAD,IACA,cAAC,EAAD,QCKGwE,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBjB,MAAK,YAAkD,IAA/CkB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.73f3cfc1.chunk.js","sourcesContent":["import {AppBar, Link, makeStyles, Toolbar, Typography} from \"@material-ui/core\";\nimport React from \"react\";\n\nconst useStyles = makeStyles(() => ({\n    header: {\n        backgroundColor: \"#343a40\",\n        height: \"56px\"\n    },\n    logo: {\n        fontFamily: \"Titillium Web, sans-serif\",\n        fontWeight: 600,\n        color: \"#fff\",\n        paddingBottom: \".5125rem\",\n        fontSize: \"1.25rem\",\n    }\n}));\n\nfunction Header() {\n    const { header, logo } = useStyles();\n\n    const displayDesktop = () => {\n        return <Toolbar>{appLogo}</Toolbar>;\n    };\n\n    const appLogo = (\n        <Link href=\"https://mim-hosts.github.io\" style={{ textDecoration: 'none' }}>\n            <Typography className={logo}>\n                mim-hosts.github.io\n            </Typography>\n        </Link>\n    );\n\n    return (\n        <AppBar className={header}>{displayDesktop()}</AppBar>\n    );\n}\n\nexport default Header;\n","import React from 'react';\nimport './TableHeader.css';\n\nfunction TableHeader() {\n    return (\n        <thead className=\"thead-dark\">\n            <tr>\n                <th scope=\"col\" style={{ width: \"105px\" }}>Nazwa kodowa</th>\n                <th scope=\"col\" style={{ width: \"175px\" }}>Typ komputera</th>\n                <th scope=\"col\" style={{ width: \"155px\" }}>Procesor</th>\n                <th scope=\"col\" style={{ width: \"90px\" }}>Pamięć RAM</th>\n                <th scope=\"col\" style={{ width: \"320px\" }}>Grafika</th>\n                <th scope=\"col\" style={{ width: \"500px\"}}>\n                    <div style={{ paddingLeft: \"14px\" }}>\n                        Hosty\n                    </div>\n                </th>\n            </tr>\n        </thead>\n    );\n}\n\nexport default TableHeader;\n","import React, {FunctionComponent} from 'react';\nimport './TableRow.css';\nimport {ColorInfo, ComputerTypeInfo} from \"../Table\";\nimport {Button} from \"@material-ui/core\";\n\nexport interface TableRowProps {\n    staticInfo: ComputerTypeInfo;\n    hosts?: ColorInfo\n}\n\nconst windowsLogo = (invert?: boolean) => (\n    <img width='20px' style={{\n        filter: invert ? 'invert(100%)' : undefined,\n        marginLeft: '6px'\n    }} src={process.env.PUBLIC_URL + '/windows.svg'} alt='windows'/>\n);\n\nconst linuxLogo = (invert?: boolean) => (\n    <img width='20px' style={{\n        filter: invert ? 'invert(100%)' : undefined,\n        marginLeft: '6px'\n    }} src={process.env.PUBLIC_URL + '/linux.svg'} alt='linux'/>\n);\n\nconst macosLinuxLogo = (invert?: boolean) => (\n    <div style={{ marginRight: '-12px', marginBottom: '6px' }}>\n        <img width='16px' style={{\n            filter: invert ? 'invert(100%)' : undefined,\n            marginBottom: '-2px'\n        }} src={process.env.PUBLIC_URL + '/macos.svg'} alt='macos'/>\n        /\n        <img width='16px' style={{\n            filter: invert ? 'invert(100%)' : undefined,\n            marginBottom: '-2px'\n        }} src={process.env.PUBLIC_URL + '/linux.svg'} alt='linux'/>\n    </div>\n);\n\nconst TableRow: FunctionComponent<TableRowProps> = ({\n    staticInfo,\n    hosts\n}) => {\n    let hostsButtons;\n    const darkColors = ['brown', 'white', 'blue'];\n\n    if (hosts) {\n        const entries = Object.entries(hosts).map((entry) => (\n            {\n                number: entry[0],\n                up: Boolean(entry[1].up),\n                os: entry[1].os || ''\n            }\n        )).sort((a,b) =>\n            (a.number > b.number) ? 1 : ((b.number > a.number) ? -1 : 0)\n        );\n        hostsButtons = entries.map((entry) => {\n            const hostname = `${staticInfo.codename.toLowerCase()}${entry.number}`;\n            const osLogo = entry.up ? (\n                entry.os === 'windows'\n                    ? windowsLogo(darkColors.includes(staticInfo.codename.toLowerCase()))\n                    : staticInfo.codename.toLowerCase() === 'red'\n                    ? macosLinuxLogo(darkColors.includes(staticInfo.codename.toLowerCase()))\n                    : linuxLogo(darkColors.includes(staticInfo.codename.toLowerCase()))\n            ) : <div style={{ width: '26px' }} />;\n            return (\n                <Button\n                    key={hostname}\n                    variant=\"contained\"\n                    style={{\n                        backgroundColor: entry.up ? staticInfo.color : undefined,\n                        textTransform: \"none\",\n                        width: \"112px\",\n                        margin: \"2px\",\n                        fontFamily: \"Titillium Web, sans-serif\",\n                        fontWeight: 600,\n                        color: darkColors.includes(staticInfo.codename.toLowerCase()) && entry.up ? \"white\" : undefined,\n                        cursor: !entry.up ? 'initial' : undefined\n                    }}\n                    onClick={entry.up ? () => {navigator.clipboard.writeText(hostname)} : undefined}\n                >\n                    {hostname}\n                    <div style={{ marginLeft: '4px', marginBottom: '-6px' }}>\n                        {osLogo}\n                    </div>\n                </Button>\n            )\n        })\n    } else {\n        hostsButtons = 'Loading...'\n    }\n\n    return (\n        <tr>\n            <td style={{ color: staticInfo.color }}>{staticInfo.codename}</td>\n            <td>{staticInfo.type}</td>\n            <td>{staticInfo.processor}</td>\n            <td>{staticInfo.memory}</td>\n            <td>{staticInfo.graphics}</td>\n            <td>\n                <div style={{ paddingLeft: \"12px\" }}>\n                    {hostsButtons}\n                </div>\n            </td>\n        </tr>\n    );\n}\n\nexport default TableRow;\n","import React, {useEffect, useState} from 'react';\nimport TableHeader from \"./TableHeader/TableHeader\";\nimport './Table.css';\nimport TableRow from \"./TableRow/TableRow\";\nimport axios from \"axios\";\n\nexport interface ComputerTypeInfo {\n    codename: string,\n    type: string,\n    processor: string,\n    memory: string,\n    graphics: string,\n    color: string\n}\n\nconst REFRESH_INTERVAL_SECONDS = 60;\n\nconst staticInfo: ComputerTypeInfo[] = [\n    {\n        codename: \"Red\",\n        type: \"Apple iMac Late 2013\",\n        processor: \"Intel Core i5-4570\",\n        memory: \"8GB\",\n        graphics: \"nVidia GeForce GT755M Mac Edition [GK107M]\",\n        color: \"red\"\n    },\n    {\n        codename: \"Pink\",\n        type: \"Dell Precision Tower 3620\",\n        processor: \"Intel Xeon E3-1240 v6\",\n        memory: \"16GB\",\n        graphics: \"nVidia Quadro P400 [GP107GL]\",\n        color: \"rgb(255, 102, 255)\"\n    },\n    {\n        codename: \"Orange\",\n        type: \"Dell Precision Tower 3620\",\n        processor: \"Intel Xeon E3-1240 v6\",\n        memory: \"16GB\",\n        graphics: \"nVidia Quadro P400 [GP107GL]\",\n        color: \"orange\"\n    },\n    {\n        codename: \"Brown\",\n        type: \"Dell Precision Tower 3620\",\n        processor: \"Intel Xeon E3-1240 v6\",\n        memory: \"16GB\",\n        graphics: \"nVidia Quadro P400 [GP107GL]\",\n        color: \"brown\"\n    },\n    {\n        codename: \"Green\",\n        type: \"Dell Precision Tower 1700\",\n        processor: \"Intel Xeon E3-1220 v3\",\n        memory: \"8GB\",\n        graphics: \"nVidia NVS 315 [GF119]\",\n        color: \"green\"\n    },\n    {\n        codename: \"Khaki\",\n        type: \"Dell Precision Tower 3630\",\n        processor: \"Intel Core i5-8500\",\n        memory: \"16GB\",\n        graphics: \"nVidia Quadro P400 [GP107GL]\",\n        color: \"rgb(173, 169, 110)\"\n    },\n    {\n        codename: \"White\",\n        type: \"Dell Precision Tower 3630\",\n        processor: \"Intel Core i5-8500\",\n        memory: \"16GB\",\n        graphics: \"nVidia Quadro P400 [GP107GL]\",\n        color: \"#212529\"\n    },\n    {\n        codename: \"Cyan\",\n        type: \"Dell Precision Tower 3630\",\n        processor: \"Intel Core i5-8500\",\n        memory: \"16GB\",\n        graphics: \"nVidia Quadro P400 [GP107GL]\",\n        color: \"cyan\"\n    },\n    {\n        codename: \"Blue\",\n        type: \"Dell Precision Tower 3630\",\n        processor: \"Intel Core i5-8500\",\n        memory: \"16GB\",\n        graphics: \"nVidia Quadro P400 [GP107GL]\",\n        color: \"blue\"\n    },\n    {\n        codename: \"Violet\",\n        type: \"Dell Precision Tower 3630\",\n        processor: \"Intel Core i5-8500\",\n        memory: \"16GB\",\n        graphics: \"nVidia Quadro P400 [GP107GL]\",\n        color: \"violet\"\n    }\n]\n\nexport interface HostInfo {\n    up: boolean;\n    os?: string;\n}\n\nexport interface ColorInfo {\n    [index: number]: HostInfo\n}\n\ninterface HostsInfo {\n    [color: string]: ColorInfo;\n}\n\nfunction Table() {\n    const [hosts, setHosts] = useState<HostsInfo>();\n\n    const getHosts = async () => {\n        try {\n            axios.get<HostsInfo>('https://students.mimuw.edu.pl/~kr394714/mim-hosts/')\n                .then(response => {\n                    setHosts(response.data);\n                });\n        } catch (err) {\n            console.error(err.message);\n        }\n    };\n\n    useEffect(()=>{\n        getHosts();\n        const interval = setInterval(()=>{\n            getHosts()\n        },REFRESH_INTERVAL_SECONDS * 1000);\n        return () => clearInterval(interval)\n    },[])\n\n    return (\n        <div className=\"table-responsive\">\n            <table className=\"table-bordered\">\n                <TableHeader />\n                <tbody>\n                {staticInfo.map((computerTypeInfo) => {\n                    let computerTypeHosts = undefined;\n                    if (hosts) {\n                        computerTypeHosts = hosts[computerTypeInfo.codename.toLowerCase()];\n                    }\n                    return (\n                        <TableRow\n                            key={computerTypeInfo.codename.toLowerCase()}\n                            staticInfo={computerTypeInfo}\n                            hosts={computerTypeHosts}\n                        />\n                    )\n                })}\n                </tbody>\n            </table>\n        </div>\n    );\n}\n\nexport default Table;\n","import React from 'react';\nimport './App.css';\nimport Header from \"./Header/Header\";\nimport Table from \"./Table/Table\";\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <Header/>\n            <Table/>\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}